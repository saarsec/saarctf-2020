import json
import random
import re
import socket
import sys
from typing import List


def default_target() -> str:
	target = sys.argv[1] if len(sys.argv) > 1 else 'localhost:8080'
	if ':' not in target:
		target += ':8080'
	print(target)
	return target


def login(session, target, username=None, password=None):
	if username is None:
		username = 'user' + str(random.randint(0, 10000000))
	if password is None:
		password = 'pass_' + username
	resp = session.post('http://{}/api/login-register'.format(target), json={'username': username, 'password': password})
	assert resp.status_code == 200
	return username


def get_interesting_visitors(session, target, need_login=False) -> List[str]:
	if need_login:
		login(session, target)
	text = session.get('http://{}/visitor'.format(target)).text
	result = []
	for m in re.finditer('link-visitor" data-username="([^"]+)"', text):
		if not m.group(1).startswith('user'):
			result.append(m.group(1))
	return result


def build_post_request(host, path, data=None, cookies=None) -> bytes:
	host = host.rstrip('/').split('//')[-1]
	data = json.dumps(data).encode('utf-8') if data else b''
	parts = [
		'POST {} HTTP/1.1'.format(path),
		'Host: ' + host,
		'Connection: close',
		'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0',
		'Content-Type: application/json',
		'Content-Length: {}'.format(len(data))
	]
	if cookies:
		parts.append('Cookie: ' + '; '.join('{}={}'.format(k, v) for k, v in cookies.items()))
	return b"\r\n".join([p.encode('utf-8') for p in parts]) + b"\r\n\r\n" + data


def build_get_request(host, path, cookies=None) -> bytes:
	host = host.rstrip('/').split('//')[-1]
	parts = [
		'GET {} HTTP/1.1'.format(path),
		'Host: ' + host,
		'Connection: close',
		'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0',
	]
	if cookies:
		parts.append('Cookie: ' + '; '.join('{}={}'.format(k, v) for k, v in cookies.items()))
	return b"\r\n".join([p.encode('utf-8') for p in parts]) + b"\r\n\r\n"


def get_socket_to_host(host, port=80) -> socket.socket:
	if '//' in host:
		host = host.split('//')[1]
	host = host.rstrip('/')
	if ':' in host:
		host, port = host.split(':')
		port = int(port)
	sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	sock.connect((host, port))
	return sock


def receive_all_and_close(socket: socket.socket) -> bytes:
	content = b''
	while True:
		buffer = socket.recv(4096)
		if len(buffer) == 0:
			socket.close()
			return content
		content += buffer


def summarizeHttpAnswer(answer: bytes):
	answer = answer.decode('utf-8')
	header, body = answer.split("\r\n\r\n", 1)
	return header.split("\r\n")[0] + "\n" + body
