import sys
from gameserver import GameServer

PORT = 4711

def exploit(cipher, parameters):
    from sympy.ntheory import factorint
    from Crypto.Util.number import bytes_to_long, long_to_bytes, inverse
    n = parameters["n"]
    e = parameters["e"]
    factors = factorint(n)
    assert len(factors) == 2
    p, q = list(factors.keys())
    assert factors[p] == factors[q] == 1  # multiplicity must be 1.
    d = inverse(e, (p - 1) * (q - 1))
    plain = long_to_bytes(pow(bytes_to_long(cipher), d, n))
    return plain.decode("utf-8")


if __name__ == "__main__":
    assert len(sys.argv) >= 3, "Needs flag ids in third argument"
    target = sys.argv[1]
    flagIds = sys.argv[2].split(",")

    for flagId in flagIds:
        cipher, params = GameServer.retrieveCipher(target, PORT, flagId)
        if params["method"] == "saar" and params["e"] == 2**16 + 1:
            plain = exploit(cipher, params)
            print(plain)

