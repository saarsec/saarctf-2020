import sys
from gameserver import GameServer

PORT = 4711

def exploit(cipher, parameters):
    from sympy.core.numbers import Rational
    from sympy.ntheory.continued_fraction import continued_fraction_convergents, continued_fraction_iterator
    from Crypto.Util.number import bytes_to_long, long_to_bytes
    e = parameters["e"]
    n = parameters["n"]
    maxConvergents = 10000
    testMessage = 4711
    testCipher = pow(testMessage, e, n)
    convergents = continued_fraction_convergents(continued_fraction_iterator(Rational(e, n)))
    i = 0
    d = None
    while i < maxConvergents:
        try:
            c = next(convergents)
            d = c.q
            if pow(testCipher, d, n) == testMessage:
                break
        except StopIteration:
            assert False, "No more convergents. Key should have been found by now."
        i += 1

    plain = long_to_bytes(pow(bytes_to_long(cipher), d, int(parameters["n"])))
    return plain.decode("utf-8")


if __name__ == "__main__":
    assert len(sys.argv) >= 3, "Needs flag ids in third argument"
    target = sys.argv[1]
    flagIds = sys.argv[2].split(",")

    for flagId in flagIds:
        cipher, params = GameServer.retrieveCipher(target, PORT, flagId)
        if params["method"] == "saar" and params["e"] > 2**16 + 1:
            plain = exploit(cipher, params)
            print(plain)

